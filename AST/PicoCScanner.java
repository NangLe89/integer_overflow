/* The following code was generated by JFlex 1.6.1 */

package AST;

import java.io.*;
import beaver.Symbol;
import beaver.Scanner;
import AST.PicoCParser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Nang LE/Documents/GitHub/anyname/integer_overflow/tmp/scanner/JavaScanner.flex</tt>
 */
public final class PicoCScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\1\1\53\1\4\1\2\14\10\1\77\1\10\4\0"+
    "\1\3\1\66\1\22\1\0\1\7\1\76\1\72\1\21\1\55\1\56"+
    "\1\6\1\74\1\62\1\20\1\16\1\5\1\11\3\24\4\15\2\14"+
    "\1\71\1\61\1\65\1\63\1\64\1\70\1\0\3\13\1\52\1\17"+
    "\1\51\5\7\1\50\13\7\1\12\2\7\1\0\1\23\1\0\1\75"+
    "\1\7\1\0\1\30\1\25\1\32\1\40\1\27\1\43\1\44\1\46"+
    "\1\36\1\7\1\31\1\41\1\7\1\34\1\33\2\7\1\26\1\42"+
    "\1\35\1\37\1\7\1\45\1\12\1\47\1\7\1\57\1\73\1\60"+
    "\1\67\6\10\1\54\32\10\2\0\4\7\4\0\1\7\2\0\1\10"+
    "\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7"+
    "\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10"+
    "\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0"+
    "\236\7\11\0\46\7\2\0\1\7\7\0\47\7\7\0\1\7\1\0"+
    "\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0"+
    "\33\7\5\0\3\7\15\0\5\10\6\0\1\7\4\0\13\10\5\0"+
    "\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0"+
    "\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7"+
    "\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7"+
    "\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10"+
    "\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10\104\0"+
    "\1\7\1\0\13\7\67\0\33\10\1\0\4\10\66\7\3\10\1\7"+
    "\22\10\1\7\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0"+
    "\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7"+
    "\2\10\2\0\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7"+
    "\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10"+
    "\3\0\1\10\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10"+
    "\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10"+
    "\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0"+
    "\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0"+
    "\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0"+
    "\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\1\0\2\7\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0"+
    "\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0"+
    "\1\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10"+
    "\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0"+
    "\12\10\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0"+
    "\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10"+
    "\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0"+
    "\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0"+
    "\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10"+
    "\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0"+
    "\6\10\2\0\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0"+
    "\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7"+
    "\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10"+
    "\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10"+
    "\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10"+
    "\1\7\17\10\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7"+
    "\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7"+
    "\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7"+
    "\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7"+
    "\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0"+
    "\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7"+
    "\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0"+
    "\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0"+
    "\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7\5\10\4\0"+
    "\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7"+
    "\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0"+
    "\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10"+
    "\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10"+
    "\4\7\1\10\4\7\3\10\2\7\11\0\300\7\47\10\25\0\4\10"+
    "\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0"+
    "\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0"+
    "\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\10\30\0"+
    "\1\53\1\53\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0"+
    "\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7"+
    "\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0"+
    "\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10"+
    "\2\0\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7"+
    "\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10"+
    "\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7"+
    "\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10"+
    "\4\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7"+
    "\2\0\16\7\42\0\173\7\105\0\65\7\210\0\1\10\202\0\35\7"+
    "\3\0\61\7\57\0\37\7\21\0\33\7\65\0\36\7\2\0\44\7"+
    "\4\0\10\7\1\0\5\7\52\0\236\7\2\0\12\10\u0356\0\6\7"+
    "\2\0\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0\27\7"+
    "\252\0\26\7\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7"+
    "\3\10\1\0\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7"+
    "\4\0\3\10\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7"+
    "\12\0\23\7\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\10"+
    "\20\0\3\10\55\7\13\10\2\0\1\10\22\0\31\7\7\0\12\10"+
    "\6\0\3\10\44\7\16\10\1\0\12\10\100\0\3\10\60\7\16\10"+
    "\4\7\13\0\12\10\u04a6\0\53\7\15\10\10\0\12\10\u0936\0\u036f\7"+
    "\221\0\143\7\u0b9d\0\u042f\7\u33d1\0\u0239\7\u04c7\0\105\7\13\0\1\7"+
    "\56\10\20\0\4\10\15\7\u4060\0\2\7\u2163\0\5\10\3\0\26\10"+
    "\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0\107\7"+
    "\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7"+
    "\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7"+
    "\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7\1\0\1\7"+
    "\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\10\u1600\0\4\7"+
    "\1\0\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7"+
    "\1\0\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0\3\7"+
    "\1\0\5\7\1\0\21\7\u1144\0\ua6d7\7\51\0\u1035\7\13\0\336\7"+
    "\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\1"+
    "\1\7\1\1\1\10\12\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\35\1\36\1\1\1\2\1\0\1\37\1\40\1\6"+
    "\2\0\1\41\1\0\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\2\46\1\0\6\5\1\47\1\50\5\5\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\2\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\2\0"+
    "\1\6\1\41\1\0\1\101\12\67\5\5\1\102\2\5"+
    "\1\103\2\5\1\104\1\105\1\70\2\0\1\106\1\0"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\5\1\117\1\120\1\5\1\121\1\122\1\5\1\123"+
    "\1\5\1\124\1\5\1\125\1\126\2\5\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\200\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\200\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\200\0\200\0\200\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\200\0\u07c0\0\200\0\u0800\0\200\0\u0840"+
    "\0\u0880\0\u08c0\0\200\0\200\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\200\0\200\0\200\0\200\0\200\0\u0a40\0\200"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0180\0\u0180\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\200"+
    "\0\200\0\u0dc0\0\200\0\u0e00\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\u0e40\0\u0e80"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\200\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u0180\0\u13c0\0\u1400"+
    "\0\u0180\0\u1440\0\u1480\0\200\0\200\0\200\0\u14c0\0\u1040"+
    "\0\200\0\u1500\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\u1540\0\u0180\0\u0180\0\u1580\0\u0180\0\u0180"+
    "\0\u15c0\0\u0180\0\u1600\0\u0180\0\u1640\0\u0180\0\u0180\0\u1680"+
    "\0\u16c0\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\4\1\6\1\7\1\10\1\3"+
    "\1\11\2\10\2\12\1\13\1\10\1\14\1\15\1\16"+
    "\1\3\1\12\1\17\1\10\1\20\2\10\1\21\3\10"+
    "\1\22\1\10\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\5\10\2\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\17\54\1\57\1\60\54\54\101\0\1\4\103\0\1\61"+
    "\1\62\54\0\1\63\77\0\1\64\23\0\7\10\1\0"+
    "\1\10\4\0\27\10\1\0\1\10\22\0\1\10\11\0"+
    "\1\65\1\66\1\0\1\67\1\65\1\70\1\71\4\0"+
    "\1\65\2\0\1\71\10\0\1\72\1\73\1\0\1\74"+
    "\4\0\1\73\1\74\1\72\36\0\1\12\2\0\2\12"+
    "\1\70\1\71\4\0\1\12\2\0\1\71\10\0\1\72"+
    "\1\73\1\0\1\74\4\0\1\73\1\74\1\72\36\0"+
    "\1\70\2\0\2\70\6\0\1\70\73\0\1\75\42\0"+
    "\1\76\14\0\1\77\1\100\1\101\16\77\1\0\1\77"+
    "\1\102\54\77\7\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\103\20\10\1\104\3\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\15\10\1\105\11\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\106\12\10\1\107\4\10\1\0\1\10"+
    "\22\0\1\10\7\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\110\6\10\1\111\7\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\7\10\1\112\17\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\113\17\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\22\10\1\114\4\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\115\17\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\7\10\1\116\17\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\22\10\1\117\4\10\1\0\1\10\22\0\1\10"+
    "\63\0\1\120\77\0\1\121\1\122\76\0\1\123\1\0"+
    "\1\124\75\0\1\125\77\0\1\126\6\0\1\127\70\0"+
    "\1\130\7\0\1\131\67\0\1\132\10\0\1\133\66\0"+
    "\1\134\77\0\1\135\14\0\1\54\2\0\17\54\2\0"+
    "\54\54\1\0\1\55\76\0\1\136\2\0\1\136\1\0"+
    "\4\136\1\137\3\136\1\140\3\136\1\141\1\142\1\143"+
    "\1\137\1\144\1\145\5\136\1\146\1\147\5\136\1\150"+
    "\7\136\2\0\23\136\1\61\1\4\1\5\75\61\6\151"+
    "\1\152\71\151\11\0\1\65\2\0\1\67\1\65\1\70"+
    "\1\71\4\0\1\65\2\0\1\71\10\0\1\72\1\73"+
    "\1\0\1\74\4\0\1\73\1\74\1\72\36\0\1\153"+
    "\1\0\3\153\1\0\1\153\4\0\2\153\1\0\2\153"+
    "\1\0\1\153\5\0\1\153\2\0\1\153\5\0\2\153"+
    "\36\0\1\67\2\0\2\67\1\70\1\71\4\0\1\67"+
    "\2\0\1\71\10\0\1\72\2\0\1\74\5\0\1\74"+
    "\1\72\36\0\1\70\2\0\2\70\1\0\1\71\4\0"+
    "\1\70\2\0\1\71\10\0\1\72\2\0\1\74\5\0"+
    "\1\74\1\72\36\0\1\154\2\0\2\154\2\0\1\155"+
    "\3\0\1\154\47\0\1\155\24\0\1\156\57\0\1\100"+
    "\76\0\1\136\2\0\1\136\1\0\4\136\1\157\3\136"+
    "\1\160\3\136\1\161\1\162\1\163\1\157\1\164\1\165"+
    "\5\136\1\166\1\167\5\136\1\170\7\136\2\0\23\136"+
    "\7\0\7\10\1\0\1\10\4\0\3\10\1\171\23\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\11\10\1\172\15\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\16\10\1\173\10\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\10\10\1\174\16\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\4\10\1\175\22\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\11\10\1\176\15\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\10\10\1\177\16\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\200\17\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\2\10\1\201\24\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\11\10\1\202\15\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\12\10\1\203\14\10"+
    "\1\0\1\10\22\0\1\10\63\0\1\204\77\0\1\205"+
    "\25\0\1\140\3\0\1\140\6\0\1\140\64\0\1\206"+
    "\3\0\1\206\6\0\1\206\53\0\6\151\1\207\71\151"+
    "\5\0\1\4\1\152\102\0\1\153\1\0\3\153\1\0"+
    "\1\153\4\0\2\153\1\0\2\153\1\0\1\153\5\0"+
    "\1\153\1\73\1\0\1\153\4\0\1\73\2\153\36\0"+
    "\1\154\2\0\2\154\6\0\1\154\13\0\1\72\2\0"+
    "\1\74\5\0\1\74\1\72\36\0\1\154\2\0\2\154"+
    "\6\0\1\154\64\0\1\210\3\0\1\210\3\0\1\211"+
    "\2\0\1\210\64\0\1\212\3\0\1\212\3\0\1\211"+
    "\2\0\1\212\74\0\1\213\77\0\1\214\77\0\1\215"+
    "\77\0\1\216\77\0\1\217\77\0\1\220\77\0\1\221"+
    "\77\0\1\222\65\0\7\10\1\0\1\10\4\0\4\10"+
    "\1\223\22\10\1\0\1\10\22\0\1\10\7\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\224\23\10\1\0\1\10"+
    "\22\0\1\10\7\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\225\23\10\1\0\1\10\22\0\1\10\7\0\7\10"+
    "\1\0\1\10\4\0\11\10\1\226\15\10\1\0\1\10"+
    "\22\0\1\10\7\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\227\24\10\1\0\1\10\22\0\1\10\7\0\7\10"+
    "\1\0\1\10\4\0\20\10\1\230\6\10\1\0\1\10"+
    "\22\0\1\10\7\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\231\24\10\1\0\1\10\22\0\1\10\7\0\7\10"+
    "\1\0\1\10\4\0\7\10\1\232\17\10\1\0\1\10"+
    "\22\0\1\10\7\0\7\10\1\0\1\10\4\0\15\10"+
    "\1\233\11\10\1\0\1\10\22\0\1\10\5\151\1\4"+
    "\1\207\71\151\21\0\1\211\65\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\234\21\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\12\10\1\235\14\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\11\10\1\236\15\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\3\10\1\237\23\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\10\10\1\240\16\10\1\0\1\10\22\0\1\10"+
    "\7\0\7\10\1\0\1\10\4\0\13\10\1\241\13\10"+
    "\1\0\1\10\22\0\1\10\7\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\242\23\10\1\0\1\10\22\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5888];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\11\1\1\11\12\1\6\11\4\1\3\11"+
    "\5\1\1\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\2\11\1\1\2\0\1\1\1\0\5\11\1\0\1\11"+
    "\1\1\1\0\15\1\2\11\1\1\1\11\1\1\12\11"+
    "\2\1\10\11\2\0\2\1\1\0\1\11\25\1\3\11"+
    "\2\0\1\11\1\0\10\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PicoCScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2884) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                /* detect position of first SUB character */
  if (!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
    /* reset to only return error once */
    sub_line = 0;
    sub_column = 0;
    /* return error */
    error("error");
  }
  return sym(Terminals.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("illegal character \""+str()+ "\"");
            }
          case 88: break;
          case 2: 
            { 
            }
          case 89: break;
          case 3: 
            { return sym(Terminals.DIV);
            }
          case 90: break;
          case 4: 
            { return sym(Terminals.MULT);
            }
          case 91: break;
          case 5: 
            { return sym(Terminals.IDENTIFIER);
            }
          case 92: break;
          case 6: 
            { return sym(Terminals.INTEGER_LITERAL);
            }
          case 93: break;
          case 7: 
            { return sym(Terminals.MINUS);
            }
          case 94: break;
          case 8: 
            { yybegin(STRING);
    /* remember start position of string literal so we can */
    /* set its position correctly in the end */
    strlit_start_line = yyline+1;
    strlit_start_column = yycolumn+1;
    strbuf.setLength(0);
            }
          case 95: break;
          case 9: 
            { return sym(Terminals.LPAREN);
            }
          case 96: break;
          case 10: 
            { return sym(Terminals.RPAREN);
            }
          case 97: break;
          case 11: 
            { return sym(Terminals.LBRACE);
            }
          case 98: break;
          case 12: 
            { return sym(Terminals.RBRACE);
            }
          case 99: break;
          case 13: 
            { return sym(Terminals.SEMICOLON);
            }
          case 100: break;
          case 14: 
            { return sym(Terminals.COMMA);
            }
          case 101: break;
          case 15: 
            { return sym(Terminals.EQ);
            }
          case 102: break;
          case 16: 
            { return sym(Terminals.GT);
            }
          case 103: break;
          case 17: 
            { return sym(Terminals.LT);
            }
          case 104: break;
          case 18: 
            { return sym(Terminals.NOT);
            }
          case 105: break;
          case 19: 
            { return sym(Terminals.COMP);
            }
          case 106: break;
          case 20: 
            { return sym(Terminals.QUESTION);
            }
          case 107: break;
          case 21: 
            { return sym(Terminals.COLON);
            }
          case 108: break;
          case 22: 
            { return sym(Terminals.AND);
            }
          case 109: break;
          case 23: 
            { return sym(Terminals.OR);
            }
          case 110: break;
          case 24: 
            { return sym(Terminals.PLUS);
            }
          case 111: break;
          case 25: 
            { return sym(Terminals.XOR);
            }
          case 112: break;
          case 26: 
            { return sym(Terminals.MOD);
            }
          case 113: break;
          case 27: 
            { if(sub_line == 0 && sub_column == 0) {
    sub_line = yyline; sub_column = yycolumn;
  }
            }
          case 114: break;
          case 28: 
            { strbuf.append(str());
            }
          case 115: break;
          case 29: 
            { error("unterminated string at end of line");
            }
          case 116: break;
          case 30: 
            { yybegin(YYINITIAL);
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
            }
          case 117: break;
          case 31: 
            { return sym(Terminals.DIVEQ);
            }
          case 118: break;
          case 32: 
            { return sym(Terminals.MULTEQ);
            }
          case 119: break;
          case 33: 
            { return sym(Terminals.DOUBLE_LITERAL);
            }
          case 120: break;
          case 34: 
            { return sym(Terminals.LONG_LITERAL);
            }
          case 121: break;
          case 35: 
            { return sym(Terminals.FLOATING_POINT_LITERAL);
            }
          case 122: break;
          case 36: 
            { return sym(Terminals.MINUSMINUS);
            }
          case 123: break;
          case 37: 
            { return sym(Terminals.MINUSEQ);
            }
          case 124: break;
          case 38: 
            { error("unterminated character literal at end of line");
            }
          case 125: break;
          case 39: 
            { return sym(Terminals.IF);
            }
          case 126: break;
          case 40: 
            { return sym(Terminals.DO);
            }
          case 127: break;
          case 41: 
            { return sym(Terminals.EQEQ);
            }
          case 128: break;
          case 42: 
            { return sym(Terminals.GTEQ);
            }
          case 129: break;
          case 43: 
            { return sym(Terminals.RSHIFT);
            }
          case 130: break;
          case 44: 
            { return sym(Terminals.LTEQ);
            }
          case 131: break;
          case 45: 
            { return sym(Terminals.LSHIFT);
            }
          case 132: break;
          case 46: 
            { return sym(Terminals.NOTEQ);
            }
          case 133: break;
          case 47: 
            { return sym(Terminals.ANDEQ);
            }
          case 134: break;
          case 48: 
            { return sym(Terminals.ANDAND);
            }
          case 135: break;
          case 49: 
            { return sym(Terminals.OREQ);
            }
          case 136: break;
          case 50: 
            { return sym(Terminals.OROR);
            }
          case 137: break;
          case 51: 
            { return sym(Terminals.PLUSEQ);
            }
          case 138: break;
          case 52: 
            { return sym(Terminals.PLUSPLUS);
            }
          case 139: break;
          case 53: 
            { return sym(Terminals.XOREQ);
            }
          case 140: break;
          case 54: 
            { return sym(Terminals.MODEQ);
            }
          case 141: break;
          case 55: 
            { error("illegal escape sequence \""+str()+"\"");
            }
          case 142: break;
          case 56: 
            { strbuf.append((char)Integer.parseInt(str().substring(1),8));
            }
          case 143: break;
          case 57: 
            { strbuf.append( '\'' );
            }
          case 144: break;
          case 58: 
            { strbuf.append( '\"' );
            }
          case 145: break;
          case 59: 
            { strbuf.append( '\\' );
            }
          case 146: break;
          case 60: 
            { strbuf.append( '\b' );
            }
          case 147: break;
          case 61: 
            { strbuf.append( '\r' );
            }
          case 148: break;
          case 62: 
            { strbuf.append( '\n' );
            }
          case 149: break;
          case 63: 
            { strbuf.append( '\t' );
            }
          case 150: break;
          case 64: 
            { strbuf.append( '\f' );
            }
          case 151: break;
          case 65: 
            { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len() - 1));
            }
          case 152: break;
          case 66: 
            { return sym(Terminals.INT);
            }
          case 153: break;
          case 67: 
            { return sym(Terminals.FOR);
            }
          case 154: break;
          case 68: 
            { return sym(Terminals.RSHIFTEQ);
            }
          case 155: break;
          case 69: 
            { return sym(Terminals.LSHIFTEQ);
            }
          case 156: break;
          case 70: 
            { int val = Integer.parseInt(str().substring(2, len() - 1), 8);
                                   return sym(Terminals.CHARACTER_LITERAL, "" + ((char) val));
            }
          case 157: break;
          case 71: 
            { return sym(Terminals.CHARACTER_LITERAL, "\'");
            }
          case 158: break;
          case 72: 
            { return sym(Terminals.CHARACTER_LITERAL, "\"");
            }
          case 159: break;
          case 73: 
            { return sym(Terminals.CHARACTER_LITERAL, "\\");
            }
          case 160: break;
          case 74: 
            { return sym(Terminals.CHARACTER_LITERAL, "\b");
            }
          case 161: break;
          case 75: 
            { return sym(Terminals.CHARACTER_LITERAL, "\r");
            }
          case 162: break;
          case 76: 
            { return sym(Terminals.CHARACTER_LITERAL, "\n");
            }
          case 163: break;
          case 77: 
            { return sym(Terminals.CHARACTER_LITERAL, "\t");
            }
          case 164: break;
          case 78: 
            { return sym(Terminals.CHARACTER_LITERAL, "\f");
            }
          case 165: break;
          case 79: 
            { return sym(Terminals.BYTE);
            }
          case 166: break;
          case 80: 
            { return sym(Terminals.ELSE);
            }
          case 167: break;
          case 81: 
            { return sym(Terminals.CHAR);
            }
          case 168: break;
          case 82: 
            { return sym(Terminals.LONG);
            }
          case 169: break;
          case 83: 
            { return sym(Terminals.GOTO);
            }
          case 170: break;
          case 84: 
            { return sym(Terminals.BREAK);
            }
          case 171: break;
          case 85: 
            { return sym(Terminals.SHORT);
            }
          case 172: break;
          case 86: 
            { return sym(Terminals.WHILE);
            }
          case 173: break;
          case 87: 
            { return sym(Terminals.CONTINUE);
            }
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
