import java.util.Map;
import utility.Pair;
import utility.SetRepUtility;
import AST.*;

aspect LV {
	/** The kill function for live variables. */
	syn Set<String> Block.killLV();
	eq AssignS.killLV() {
		Set<String> ret = SetRepUtility.singleton(getVar());
		return ret;
    }
	eq SkipS.killLV() = SetRepUtility.emptySet();
	eq LabeledExpr.killLV() = SetRepUtility.emptySet();
	
	/** The gen function for live variables. */
	syn Set<String> Block.genLV();
	eq AssignS.genLV() = getExpr().FV();
	eq SkipS.genLV() = SetRepUtility.emptySet();
	eq LabeledExpr.genLV() = FV();
				
	/** Compute the entry information for the LV analysis. */
	syn Set<String> Block.LVentry() circular [SetRepUtility.emptySet()];
    eq Block.LVentry() {
		Set<String> ret = SetRepUtility.emptySet(); // start with a fresh set!
		ret.addAll(this.LVexit());
		ret.removeAll(this.killLV());
		ret.addAll(this.genLV());		
		return ret;
	}
	
	/** Compute the exit information for the LV analysis. */
	syn Set<String> Block.LVexit() circular [SetRepUtility.emptySet()];
    eq Block.LVexit() {
		Set<String> ret = SetRepUtility.emptySet();
		if (progAST().finals().contains(getLabelAST())) {
			; // use the empty set, which is already in ret
		} else {
			for (Label lprime : outFlows()) {
				Block b = lprime.itsBlock();
				ret.addAll(b.LVentry());
			}
		}		
		return ret;
	}
}