import java.util.*;
import utility.SetRepUtility;
import utility.FlowGraph;

/** Control Flow Graph attributes for the assert extension to the WHILE langauge.
 */
aspect CFGAssert {

    /** The initial label of an AST node. */
	// syn Label S.init();	
	eq AssertS.init() = getLabeledExpr().getLabelAST();
	
	// syn Set<Label> Program.finals();
	eq AssertS.finals() = SetRepUtility.singleton(getLabeledExpr().getLabelAST());
	
	
	/** Set of blocks in a statement. */
	// syn Set<Block> S.blocks();
	eq AssertS.blocks() = SetRepUtility.singleton(this.getLabeledExpr());

	// Set of labels in a statement
	// syn Set<Label> S.labels();
	eq AssertS.labels() = SetRepUtility.singleton(getLabeledExpr().getLabelAST());
	
    /** Mapping from labels back to blocks. */
	// inh Block Label.itsBlock();
	eq AssertS.getLabeledExpr().itsBlock() = this.getLabeledExpr();

	/** Flows into a block.*/
	// inh Set<Label> S.inFlows();	
	
	// inh Set<Label> LabeledExpr.inFlows();
	eq AssertS.getLabeledExpr().inFlows() = this.inFlows();

	/** Next statement in a sequence (lexically), null if none.
	  * This is a helping attribute for outFlows. */
	// inh S S.next();
	
	/** Flows out of a block. */
	// inh Set<Label> S.outFlows();	
	
	// inh Set<Label> LabeledExpr.outFlows();
	eq AssertS.getLabeledExpr().outFlows() = this.outFlows();

	/** flows inside of a statement */
	// syn FlowGraph<Label, Label> S.flows();
	eq AssertS.flows() = new FlowGraph<Label, Label>();
}
