import java.util.*;
import utility.SetRepUtility;
import utility.FlowGraph;

/** Control Flow Graph attributes for the assert extension to the WHILE langauge.
 */
aspect CFGTaint {

    /** The initial label of an AST node. */
	// syn Label S.init();	
	eq ReadS.init() = getLabelAST();
	eq SanitizeS.init() = getLabelAST();
	eq PrintS.init() = getLabelAST();
	
	// syn Set<Label> Program.finals();
	eq ReadS.finals() = SetRepUtility.singleton(getLabelAST());
	eq SanitizeS.finals() = SetRepUtility.singleton(getLabelAST());
	eq PrintS.finals() = SetRepUtility.singleton(getLabelAST());
	
	/** Set of blocks in a statement. */
	// syn Set<Block> S.blocks();
	eq ReadS.blocks() = SetRepUtility.singleton(this);
	eq SanitizeS.blocks() = SetRepUtility.singleton(this);
	eq PrintS.blocks() = SetRepUtility.singleton(this);

	// Set of labels in a statement
	// syn Set<Label> S.labels();
	eq ReadS.labels() = SetRepUtility.singleton(getLabelAST());
	eq SanitizeS.labels() = SetRepUtility.singleton(getLabelAST());
	eq PrintS.labels() = SetRepUtility.singleton(getLabelAST());
	
        /** Mapping from labels back to blocks. */
	// inh Block Label.itsBlock();
	eq ReadS.getLabelAST().itsBlock() = this;
	eq SanitizeS.getLabelAST().itsBlock() = this;
	eq PrintS.getLabelAST().itsBlock() = this;

	// Make the new statements be subtypes of Block
	ReadS implements Block;
	SanitizeS implements Block;
	PrintS implements Block;	

	/** Flows into a block.*/
	// inh Set<Label> S.inFlows();	
	
	/** Next statement in a sequence (lexically), null if none.
	  * This is a helping attribute for outFlows. */
	// inh S S.next();
	
	/** Flows out of a block. */
	// inh Set<Label> S.outFlows();	
	
	/** flows inside of a statement */
	// syn FlowGraph<Label, Label> S.flows();
	eq ReadS.flows() = new FlowGraph<Label, Label>();
	eq SanitizeS.flows() = new FlowGraph<Label, Label>();
	eq PrintS.flows() = new FlowGraph<Label, Label>();
}
