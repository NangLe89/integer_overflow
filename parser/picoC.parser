%header {:
package AST;
import AST.*;
:};

%embed {:
  int l = 1; // l means label
:};

%left LPAREN, RPAREN, POSTINCDEC;
%right PLUSPLUS, MINUSMINUS;
%left MULT, DIV, MOD;
%left PLUS, MINUS;
%left LSHIFT, RSHIFT;
%left LT, GT, LTEQ, GTEQ;
%left EQEQ, NOTEQ;
%left AND;
%left XOR;
%left OR;
%left ANDAND;
%left OROR;
%right COLON;
%right EQ, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ, MODEQ, ANDEQ,
		XOREQ, OREQ, LSHIFTEQ, RSHIFTEQ;

%nonassoc BOTTOM;

%goal goal;

Program goal =
  block			{: return new Program(block); :}
  ;
Stmt block =
    LBRACE block_statements.list? RBRACE {: return new CompoundS(l++, list); :}
  ;
List block_statements =
    statement.b                    {: return new List().add(b); :}
  | block_statements.l SEMICOLON statement.b  {: return l.add(b); :}
  ;

//Variable declaration
VarDeclStmt local_variable_declaration_statement =
    local_variable_declaration.l SEMICOLON {: return l; :}
  ;
VarDeclStmt local_variable_declaration =
    type.t IDENTIFIER	 		{: return new VarDeclStmt(l++, t, IDENTIFIER); :}
  ;

Access type =
    BYTE		{: return new PrimitiveTypeAccess("byte"); :}
  | SHORT		{: return new PrimitiveTypeAccess("short"); :}
  | INT 		{: return new PrimitiveTypeAccess("int"); :}
  | LONG		{: return new PrimitiveTypeAccess("long"); :}
  | CHAR		{: return new PrimitiveTypeAccess("char"); :}
  ;

Stmt statement =
    labeled_statement
  | if_then_else_statement
  | while_statement
  | for_statement
  | expression_statement
  | block
  | empty_statement
  | do_statement
  | break_statement
  | local_variable_declaration_statement
  | goto_statement
  ;

ForStmt for_statement =
    FOR LPAREN for_init.i? SEMICOLON expression.e? SEMICOLON for_update.u? RPAREN statement.s {: return new ForStmt(l++, i, e, u, s); :}
  ;
List for_init =
    statement_expression_list
  ;
List for_update =
    statement_expression_list
  ;
List statement_expression_list =
    statement_expression.e                                   {: return new List().add(e); :}
  | statement_expression_list.sl COMMA statement_expression.e {: return sl.add(e); :}
  ;
ExprStmt statement_expression =
    assignment.a                               {: return new ExprStmt(l++, a); :}
  | postincrement_expression.e                 {: return new ExprStmt(l++, e); :}
  | postdecrement_expression.e                 {: return new ExprStmt(l++, e); :}
  ;
WhileStmt while_statement =
    WHILE LPAREN expression.e RPAREN statement.s {: return new WhileStmt(l++, e, s); :}
  ;
IfStmt if_then_else_statement =
    IF LPAREN expression.e RPAREN statement.t ELSE statement.els {: return new IfStmt(l++, e, t, els); :}
  ;
LabeledStmt labeled_statement =
    IDENTIFIER.id COLON statement.s            {: return new LabeledStmt(l++, id, s); :}
  ;
GotoStmt goto_statement =
  GOTO IDENTIFIER.id SEMICOLON		{: return new GotoStmt(l++, id); :}
  ;

BreakStmt break_statement =
   BREAK IDENTIFIER.id SEMICOLON     {: return new BreakStmt(l++, id); :}
 // |BREAK               SEMICOLON     {: return new BreakStmt(l++, ""); :}
  ;
DoStmt do_statement =
    DO statement.s WHILE LPAREN expression.e RPAREN SEMICOLON {: return new DoStmt(l++, s, e); :}
  ;

ExprStmt expression_statement =
    statement_expression.e SEMICOLON           {: return e; :}
  ;
EmptyStmt empty_statement =
    SEMICOLON                                  {: return new EmptyStmt(l++); :}
  ;

Expr expression = assignment_expression;
Expr assignment_expression =
   assignment
   |conditional_or_expression
  ;
Expr assignment =
    postfix_expression.dest EQ assignment_expression.source {: return new AssignSimpleExpr(dest, source); :}
  | postfix_expression.dest MULTEQ assignment_expression.source {: return new AssignMulExpr(dest, source); :}
  | postfix_expression.dest DIVEQ assignment_expression.source {: return new AssignDivExpr(dest, source); :}
  | postfix_expression.dest MODEQ assignment_expression.source {: return new AssignModExpr(dest, source); :}
  | postfix_expression.dest PLUSEQ assignment_expression.source {: return new AssignPlusExpr(dest, source); :}
  | postfix_expression.dest MINUSEQ assignment_expression.source {: return new AssignMinusExpr(dest, source); :}
  | postfix_expression.dest LSHIFTEQ assignment_expression.source {: return new AssignLShiftExpr(dest, source); :}
  | postfix_expression.dest RSHIFTEQ assignment_expression.source {: return new AssignRShiftExpr(dest, source); :}
  | postfix_expression.dest ANDEQ assignment_expression.source {: return new AssignAndExpr(dest, source); :}
  | postfix_expression.dest XOREQ assignment_expression.source {: return new AssignXorExpr(dest, source); :}
  | postfix_expression.dest OREQ assignment_expression.source {: return new AssignOrExpr(dest, source); :}
  ;
Expr postfix_expression =
    literal @BOTTOM
  | name @BOTTOM
  | postincrement_expression
  | postdecrement_expression
  ;
Expr literal =
    INTEGER_LITERAL        {: return new IntegerLiteral(INTEGER_LITERAL); :}
  | CHARACTER_LITERAL      {: return new CharacterLiteral(CHARACTER_LITERAL); :}
  | STRING_LITERAL         {: return new StringLiteral(STRING_LITERAL); :}
  ;

Expr postincrement_expression =
    postfix_expression.e PLUSPLUS @POSTINCDEC {: return new PostIncExpr(e); :}
  ;
Expr postdecrement_expression =
    postfix_expression.e MINUSMINUS @POSTINCDEC {: return new PostDecExpr(e); :}
  ;
Access name =
    simple_name
  ;
Access simple_name =
    IDENTIFIER              {: return new ParseName(IDENTIFIER); :}
  ;
Expr multiplicative_expression =
    postfix_expression
  | multiplicative_expression.e1 MULT postfix_expression.e2  {: return new MulExpr(e1, e2); :}
  | multiplicative_expression.e1 DIV postfix_expression.e2   {: return new DivExpr(e1, e2); :}
  | multiplicative_expression.e1 MOD postfix_expression.e2   {: return new ModExpr(e1, e2); :}
  ;
Expr additive_expression =
    multiplicative_expression @BOTTOM
  | additive_expression.e1 PLUS multiplicative_expression.e2   {: return new AddExpr(e1, e2); :}
  | additive_expression.e1 MINUS multiplicative_expression.e2  {: return new SubExpr(e1, e2); :}
  ;
Expr shift_expression =
    additive_expression @BOTTOM
  | shift_expression.e1 LSHIFT additive_expression.e2   {: return new LShiftExpr(e1, e2); :}
  | shift_expression.e1 RSHIFT additive_expression.e2   {: return new RShiftExpr(e1, e2); :}
  ;
Expr relational_expression =
    additive_expression 
  | relational_expression.e1 LT shift_expression.e2     {: return new LTExpr(e1, e2); :}
  | relational_expression.e1 GT shift_expression.e2     {: return new GTExpr(e1, e2); :}
  | relational_expression.e1 LTEQ shift_expression.e2   {: return new LEExpr(e1, e2); :}
  | relational_expression.e1 GTEQ shift_expression.e2   {: return new GEExpr(e1, e2); :}
  ;
Expr equality_expression =
    relational_expression
  | equality_expression.e1 EQEQ relational_expression.e2  {: return new EQExpr(e1, e2); :}
  | equality_expression.e1 NOTEQ relational_expression.e2 {: return new NEExpr(e1, e2); :}
  ;
Expr and_expression =
    equality_expression @BOTTOM
  | and_expression.e1 AND equality_expression.e2        {: return new AndBitwiseExpr(e1, e2); :}
  ;
Expr exclusive_or_expression =
    and_expression @BOTTOM
  | exclusive_or_expression.e1 XOR and_expression.e2    {: return new XorBitwiseExpr(e1, e2); :}
  ;
Expr inclusive_or_expression =
    exclusive_or_expression @BOTTOM
  | inclusive_or_expression.e1 OR exclusive_or_expression.e2 {: return new OrBitwiseExpr(e1, e2); :}
  ;
Expr conditional_and_expression =
    inclusive_or_expression @BOTTOM
  | conditional_and_expression.e1 ANDAND inclusive_or_expression.e2 {: return new AndLogicalExpr(e1, e2); :}
  ;
Expr conditional_or_expression =
    conditional_and_expression @BOTTOM
  | conditional_or_expression.e1 OROR conditional_and_expression.e2 {: return new OrLogicalExpr(e1, e2); :}
  ;
//Expr conditional_expression =
//    conditional_or_expression @BOTTOM
 // | conditional_or_expression.c QUESTION expression.e1 COLON conditional_expression.e2 {: return new ConditionalExpr(c, e1, e2); :}
//  ;




