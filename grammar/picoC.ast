//This is a subset of ExtendJ

Program ::= Stmt;

abstract Stmt ::= <l:int>;
IfStmt : Stmt ::= Condition:Expr Then:Stmt Else:Stmt;
ExprStmt : Stmt ::= Expr;
BreakStmt : Stmt ::= <Identifier:String>;
EmptyStmt : Stmt;
CompoundS : Stmt ::= SList:Stmt*;
VarDeclStmt : Stmt ::= TypeAccess:Access <ID:String>;
GotoStmt : Stmt ::= <Identifier:String>;

ForStmt : Stmt ::= InitStmt:Stmt* [Condition:Expr] UpdateStmt:Stmt* Stmt;
WhileStmt : Stmt ::= Condition:Expr Stmt;
LabeledStmt : Stmt ::= <Identifier:String> Stmt;
DoStmt : Stmt ::= Stmt Condition:Expr;

//abstract Label ;
//NumLabel:Label ::= <Num>;

abstract Expr;

// Assignment expressions: <dest> = <source>, <dest> += <source>, <dest> -= <source>, etc.
abstract AssignExpr : Expr ::= Dest:Expr Source:Expr;

AssignSimpleExpr : AssignExpr;

abstract AssignAdditiveExpr : AssignExpr;
AssignPlusExpr : AssignAdditiveExpr ;
AssignMinusExpr : AssignAdditiveExpr ;

abstract AssignMultiplicativeExpr : AssignExpr;
AssignMulExpr : AssignMultiplicativeExpr ;
AssignDivExpr : AssignMultiplicativeExpr ;
AssignModExpr : AssignMultiplicativeExpr ;

abstract AssignShiftExpr : AssignExpr;
AssignLShiftExpr : AssignShiftExpr ;
AssignRShiftExpr : AssignShiftExpr ;

abstract AssignBitwiseExpr : AssignExpr;
AssignAndExpr : AssignBitwiseExpr ;
AssignXorExpr : AssignBitwiseExpr ;
AssignOrExpr : AssignBitwiseExpr ;

// Binary expressions, i.e. <LeftOperand> + <RightOperand>, <LeftOperand> && <RightOperand>, etc.
abstract Binary : Expr ::= LeftOperand:Expr RightOperand:Expr;

abstract ArithmeticExpr : Expr ::= LeftOperand:Expr RightOperand:Expr;
MulExpr : ArithmeticExpr ;
DivExpr : ArithmeticExpr ;
ModExpr : ArithmeticExpr ;
AddExpr : ArithmeticExpr ;
SubExpr : ArithmeticExpr ;

abstract ShiftExpr : Binary;
LShiftExpr : ShiftExpr ;
RShiftExpr : ShiftExpr ;

abstract RelationalExpr : Binary;
LTExpr : RelationalExpr ;
GTExpr : RelationalExpr ;
LEExpr : RelationalExpr ;
GEExpr : RelationalExpr ;

abstract EqualityExpr : RelationalExpr;
EQExpr : EqualityExpr ;
NEExpr : EqualityExpr ;

abstract BitwiseExpr : Binary;
AndBitwiseExpr : BitwiseExpr ;
OrBitwiseExpr : BitwiseExpr ;
XorBitwiseExpr : BitwiseExpr ;

abstract LogicalExpr : Binary;
AndLogicalExpr : LogicalExpr ;
OrLogicalExpr : LogicalExpr ;

// End binary expressions

// Unary expressions: e.g.<operand>++, --<operand>, -<operand>, !<operand>, etc.
abstract Unary : Expr ::= Operand:Expr;
abstract PostfixExpr : Unary;
PostIncExpr : PostfixExpr ;
PostDecExpr : PostfixExpr ;

// End unary expressions

//Literals, i.e. numbers, variable names, strings, etc.
abstract Literal : Expr ::= <LITERAL:String>;
CharacterLiteral : Literal ;
StringLiteral : Literal ;
IntegerLiteral : Literal ;

// Access expressions (whatever that means)
abstract Access : Expr ::= <ID:String>;
TypeAccess : Access;
PrimitiveTypeAccess : TypeAccess;
ParseName : Access;

// Last but not least, the ternary operator.
//ConditionalExpr : Expr ::= Condition:Expr TrueExpr:Expr FalseExpr:Expr;
